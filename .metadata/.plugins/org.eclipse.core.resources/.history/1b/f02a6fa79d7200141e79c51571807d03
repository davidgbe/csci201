package davidgbe_CSCI201_Assignment5;

import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.URL;
import java.util.HashMap;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;

import org.omg.CORBA.portable.InputStream;

public class Worker extends Thread {
	private Task currentTask;
	private Image img;
	private String target = "Task Board";
	private Factory factory;
	private int x = 70;
	private int y = 90;
	public static final int xOffset = -20;
	public static final int yOffset = 65;
	private int quantityToTake;
	private int time;
	
	public Worker(String imagePath, Factory f) {
		Toolkit tk = Toolkit.getDefaultToolkit();
		Image image = tk.createImage(imagePath);
		this.img = image;
		this.factory = f;
		System.out.println(image);
	}
	public void addTask(Task newTask) {
		this.currentTask = newTask;
	}
	
	public Task getCurrentTask() {
		return this.currentTask;
	}
	
	public Image getImage() {
		return img;
	}
	
	public int getX() {
		return this.x;
	}
	
	public int getY() {
		return this.y;
	}
	
	public void setX(int newX) {
		this.x = newX;
	}
	
	public void setY(int newY) {
		this.y = newY;
	}
	
	public void setTarget(String t) {
		this.target = t;
	}
	
	public void interact() {
		if(target.equals("Task Board")) {
			while(currentTask == null) {
				currentTask = this.factory.getFreshTask();
			}
		} else if(factory.getAllItems().get(target) instanceof Resource){
			((Resource)factory.getAllItems().get(target)).takeResource(quantityToTake);
			System.out.println("QUANTITY:" + quantityToTake);
		} else if(factory.getAllItems().get(target) instanceof Tool){
			((Tool)factory.getAllItems().get(target)).takeTool();
		} else if(factory.getAllItems().get(target) instanceof WorkArea){
			((WorkArea)factory.getAllItems().get(target)).startCountDown(time);
		}
	}
	
	public void getNextTarget() {
		if(currentTask.hasNextMaterial()) {
			target = currentTask.getNextMaterial();
			for(int i = 0; i < currentTask.getMaterials().size(); i++) {
				if(currentTask.getMaterials().get(i).name.equals(target)) {
					quantityToTake = currentTask.getMaterials().get(i).quantity;
				}
			}
		} else if(currentTask.hasNextInstruction()) {
			Instruction targetIns = currentTask.getNextInstruction();
			int time = targetIns.getTime();
			if(targetIns.needsTool()) {
				target = targetIns.nextTool();
				if(target.equals("Paintbrush") || target.equals("Pliers")) {
					target += "es";
				} else {
					target += "s";
				}
			} else {
				target = targetIns.location();
			}
		} else {
			target = "Task Board";
		}
		System.out.println("TARGET:" + target);
	}
	
	public void moveToward(String t) {
		int targetX = 0;
		int targetY = 0;
		if(t.equals("Task Board")) {
			targetX = 550;
			targetY = 25;
		} else {
			Item tt = this.factory.getAllItems().get(t);
			
			targetX = tt.getX();
			targetY = tt.getY();
		}
		if(getX() < 100) {
			if(targetY > getY() - yOffset) {
				setY(getY() + 1);
			} else if (targetY < getY() - yOffset) {
				setY(getY() - 1);
			} else {
				if(targetX > getX() + xOffset) {
					setX(getX() + 1);
				} else if(targetX < getX() + xOffset) {
					setX(getX() - 1);
				} else {
					interact();
					if(currentTask != null) {
						getNextTarget();
					}
				}
			}
		} else {
			if(targetX > getX() + xOffset) {
				setX(getX() + 1);
			} else if(targetX < getX() + xOffset) {
				setX(getX() - 1);
			} else {
				if(targetY > getY() - yOffset) {
					setY(getY() + 1);
				} else if(targetY < getY() - yOffset) {
					setY(getY() - 1);
				} else {
					interact();
					if(currentTask != null) {
						getNextTarget();
					}
				}
			}
		}
	}
	
	public void run() {
		while(true) {
			if(target != null && (target.equals("Task Board") || this.factory.getAllItems().containsKey(target))) {
				moveToward(target);
				try {
					Thread.sleep(10);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}

}
