package davidgbe_CSCI201_Assignment5;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

import javax.swing.JLabel;

public class WorkArea extends Item implements Runnable {
	private ReentrantLock lock = new ReentrantLock();
	private int seconds;
	private boolean alreadyStarted = false;

	public WorkArea(String imagePath, String text) {
		super("Open", imagePath, "", 16);
		this.mainPanel.add(new JLabel(text));
		toGreen();
	}
	
	public void startCountDown(int seconds) {
		lock.lock();
		try {
			System.out.println("1: " + this.seconds);
			this.seconds = seconds;
			System.out.println("2: " + this.seconds);
		} finally {
			lock.unlock(); 
		}
	}
	
	private void countDown() {
		lock.lock();
		try {
			toRed();
			while(seconds != 0) {
				this.updateTitle(seconds + "s");
				try {
					Thread.sleep(1000);
					seconds--;
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		} finally {
			toGreen();
			this.updateTitle("Open");	
			alreadyStarted = false;
			System.out.println("Done!");
			lock.unlock();
		}
	}

	@Override
	public void run() {
		while(true) {
			if(this.seconds != 0 && !alreadyStarted) {
				this.countDown();
				alreadyStarted = true;
			}
		}
	}
	
}
